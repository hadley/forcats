% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/match.R
\name{fct_match}
\alias{fct_match}
\title{Test for presence of certain groups/levels in a vector}
\usage{
fct_match(f, lvls, allow_missing = TRUE)
}
\arguments{
\item{f}{A factor (or character vector).}

\item{lvls}{A vector of characters for which the test "are these levels in
\code{f}?" should be performed.}

\item{allow_missing}{(logical) if \code{TRUE}, allow matching to empty levels in
f}
}
\value{
A logical vector
}
\description{
A validated version of \code{\%in\%} intended for use with logical subsetting.
Performs matching between a factor and a set of levels to pose the question
"which of the elements of a factor match these levels?"
}
\details{
Unlike \code{\%in\%}, which performs a basic yes/no test, this function
performs validation on the input vector to ensure that the levels tested
for are all present before creating a logical vector. If a tested level is
not present, then an error is thrown rather than producing a silent
\code{FALSE}.

Since a distinction can be made between \code{levels(f)} and \code{unique(f)} (the
latter excludes empty levels) the argument \code{allow_missing} can be
specified.

This is intended to replace the common pattern

\code{filter(d, l \%in\% c("x", "y"))}

with the validated

\code{filter(d, fct_match(l, c("x", "y")))}

where an error will be generated if \code{"x"} or \code{"y"} are not levels in \code{d$l}.
}
\examples{
gss_cat$marital \%>\% fct_match(c("Married", "Divorced"))
# importantly, misspelled levels throw an error
\dontrun{gss_cat$marital \%>\% fct_match(c("Married", "Davorced"))}
# match to levels()
gss_cat$race \%>\% fct_match(c("Other", "Not applicable"))
# match to unique()
gss_cat$race \%>\% fct_match(c("Other", "Not applicable"), allow_missing = TRUE)
}
